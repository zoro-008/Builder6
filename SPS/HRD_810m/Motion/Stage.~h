//---------------------------------------------------------------------------
#ifndef StageH
#define StageH
//---------------------------------------------------------------------------
#include "Timer.h"
#include "DataMan.h"
//---------------------------------------------------------------------------
//Vision
//---------------------------------------------------------------------------
#include "VisionMan.h"
//---------------------------------------------------------------------------

class CStage
{
    public:
        //Constructor
         CStage ();
        ~CStage ();

        void Init      ();
        void Close     ();
        void Reset     (); //리셑 버튼 눌렀을때 타는 함수.
        void ResetTimer();

        //Vars. 장비 구동 관련 외부에서 필요한 변수들..... 세이브 안함.
        struct SStat {
            bool bWorkEnd ;
            bool bReqStop ;

        };    //sun Clear When LOT Open. and every 30Sec in autorun()

        enum EN_SEQ_CYCLE { //이파트 오토런에서 사용 되는 싸이클들 정의.
            scIdle      = 0 ,
            scSupply    = 1 , //웨이퍼 공급.
            scExpend    = 2 , //익스펜딩.
            scPlace     = 3 , //웨이퍼 배출.
            MAX_SEQ_CYCLE
        };

        AnsiString m_sCycleName[MAX_SEQ_CYCLE] ;
        void   InitCycleName(){
            m_sCycleName[scIdle  ]="Idle  ";
            m_sCycleName[scSupply]="Supply";
            m_sCycleName[scExpend]="Expend";
            m_sCycleName[scPlace ]="Place ";
        }

        struct SCycleTime { //싸이클 시간 관련 디스플레이용.
            double dStart ; //싸이클 스타트.
            double dPitch ; //싸이클 시작 간격.
            double dWork  ; //싸이클 소요시간.
        };

        struct SStep { //기본적 싸이클들에서 스텝들.
            int          iHome    ;  //파트 홈잡는 싸이클.
            int          iToStart ;  //스타트 버튼 눌렀을시에 오토런 모드로 들어가기전 준비 싸이클...
            EN_SEQ_CYCLE iSeq     ;  //
            int          iCycle   ;
            int          iToStop  ;
        };

    protected:
        AnsiString m_sPartName  ; //현제 파트 이름 ex) "STAGE"
        //Timer.
        CDelayTimer m_tmMain    ;
        CDelayTimer m_tmCycle   ;
        CDelayTimer m_tmHome    ;
        CDelayTimer m_tmToStop  ;
        CDelayTimer m_tmToStart ;
        CDelayTimer m_tmTemp    ; //Cycle에서 시간 지연이 필요할때 씀.

        SStat Stat ;
        SStep Step , PreStep ;

        SCycleTime Time[MAX_SEQ_CYCLE] ;

        int m_iHomeTO  ;
        int m_iStartTO ;
        int m_iStopTO  ;
        int m_iCycleTO ;

        void SetStartTime(EN_SEQ_CYCLE _iSeqCycle);
        void SetEndTime  (EN_SEQ_CYCLE _iSeqCycle);

        bool   FindChip   (EN_ARAY_ID _riWhre , int &r , int &c , EN_CHIP_STAT _csStats);
        double GetMotrPos (EN_MOTR_ID _iMotr , EN_PSTN_ID _iPstnId );

        static void CallbackSTGRightClickAray(int _iCol , int _iRow , TShiftState Shift);

        void (__closure*CallbackAray)(int _iCol ,int _iRow , TShiftState Shift);

    public:    /* Direct Accessable Var.  */
        bool   CheckSafe  (EN_MOTR_ID _iMotr , EN_PSTN_ID _iPstnId );
        bool   CheckSafe  (EN_ACTR_ID _iActr , bool       _bFwd    );

        AnsiString sMainWfName ; 


        bool GetWorkEnd     (){return Stat.bWorkEnd ;}
        bool GetReqStop     (){return Stat.bReqStop ;}

        int          GetHomeStep    (){return Step.iHome    ;} int GetPreHomeStep   (){return PreStep.iHome    ;} void InitHomeStep (){ Step.iHome  = 10 ; PreStep.iHome = 0 ;}
        int          GetToStartStep (){return Step.iToStart ;} int GetPreToStartStep(){return PreStep.iToStart ;}
        EN_SEQ_CYCLE GetSeqStep     (){return Step.iSeq     ;} int GetPreSeqStep    (){return PreStep.iSeq     ;}
        int          GetCycleStep   (){return Step.iCycle   ;} int GetPreCycleStep  (){return PreStep.iCycle   ;} void InitCycleStep(){ Step.iCycle = 10 ; PreStep.iCycle = 0 ;}
        int          GetToStopStep  (){return Step.iToStop  ;} int GetPreToStopStep (){return PreStep.iToStop  ;}
        AnsiString   GetCycleName   (){return m_sCycleName[Step.iSeq];}
        SStat        GetStat        (){return Stat          ;}


        void SetStat(SStat _sStat) { Stat = _sStat ; }


        double GetTimePitch (EN_SEQ_CYCLE _iSeqCycle){return Time[_iSeqCycle].dPitch ; }
        double GetTimeWork  (EN_SEQ_CYCLE _iSeqCycle){return Time[_iSeqCycle].dWork  ; }

        //Motor.
        bool MoveMotr    (EN_MOTR_ID _iMotr , EN_PSTN_ID _iPstnId, bool _bSlowSpeed = false); // 모터를 움직일때 쓰는 함수.
        //Actuator.
        bool MoveActr    (EN_ACTR_ID _iActr , bool _bFwd); //실린더를 움직일때 쓰는 함수.

        //HomeCycle
        bool CycleHome(); //파트 홈을 잡을때 쓰는 함수.

        //Running Functions.
        bool ToStopCon (void); //스탑을 하기 위한 조건을 보는 함수.
        bool ToStartCon(void); //스타트를 하기 위한 조건을 보는 함수.
        bool ToStart   (void); //스타트를 하기 위한 함수.
        bool ToStop    (void); //스탑을 하기 위한 함수.
        bool Autorun   (void); //

        //One Cycle.
        bool CycleSupply  (void); //웨이퍼 공급.
        bool CycleExpend  (void); //익스펜딩.
        bool CyclePlace   (void); //웨이퍼 배출.

        //메뉴얼 싸이클.
        bool CycleUnExpend(void); //웨이퍼 풀기.

        

        //For Start Stop Checking.
        void SetLastCmd (void); //장비 정지시에 마지막 커맨드를 기억 하고 있다가.
        bool CheckMoved (void); //이 함수를 이용해 움직였는지 확인 하고 장비 스타트 시에 그냥 작업 할 껀지 아니면 ToStart를 하고 할 건지 결정.
        bool CheckStop  (void); //장비 정지시에 모든 모터 와 실린더 가 정지 되었는지 확인 하는 함수.

        //Loading Para.
        void Load(bool IsLoad);

        bool LotInfoAdd();
        static void OnReadBarcode(DWORD _cbInQue) ;

        TRS232C * Barcode ;
        void SendBarcodeMsg(AnsiString _sMsg);
        AnsiString GetWaferId (AnsiString _sBarcodeData); //웨이퍼 아이디.
        AnsiString GetWaferIdx(AnsiString _sBarcodeData); //웨이퍼 인덱스 (슬롯넘버)

        double GetStageAbsMmFromAbsAngle(double _dAbsAngle); //원하는 각도 넣고 mm리턴
        double GetStageAbsAngleFromAbsMm(double _dAbsMm   ); //원하는 mm 넣고 각도 림턴.



};

//---------------------------------------------------------------------------
extern CStage STG;
//---------------------------------------------------------------------------
#endif
