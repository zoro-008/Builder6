//---------------------------------------------------------------------------

#ifndef RailH
#define RailH
//---------------------------------------------------------------------------
#include "Timer.h"
#include "DataMan.h"
//---------------------------------------------------------------------------
class CRail
{
    public:
        //Constructor
        CRail (void);
        ~CRail (void);
	void Reset     (); //리셑 버튼 눌렀을때 타는 함수.
        void ResetTimer();

        //Vars.
        struct SStat {
            bool bWorkEnd ; //파트가 할일이 없을경우 true ;
            bool bReqStop ; //에러가 나거나 혹은 스탑버튼을 눌렀을때 파트가 서기를 요청하는 프레그.
        };

        enum EN_SEQ_CYCLE {
            scIdle       =  0 ,
            scOut        = 10 ,
            scFlip       = 20 ,
            scInsp3Out   = 30 ,
            scInsp2Out   = 40 ,
            scInsp1Out   = 50 ,
            scPreBuffOut = 60 ,
            scIn         = 70 ,

            MAX_SEQ_CYCLE
        };

        struct SStep {
            int          iHome    ; //홈싸이클에서 쓰는 스텝.
            int          iToStart ; //투스타트 싸이클에서 씀.
            EN_SEQ_CYCLE iSeq     ; //장비의 할일 결정.
            int          iCycle   ; //장비의 할일에서 스텝.
            int          iToStop  ; //투스탑 싸이클에서 씀.
        };

    protected:
        //Timer.
        CDelayTimer m_tmMain    ; //타임아웃용.
        CDelayTimer m_tmCycle   ; //타임아웃용.
        CDelayTimer m_tmHome    ; //타임아웃용.
        CDelayTimer m_tmToStop  ; //타임아웃용.
        CDelayTimer m_tmToStart ; //타임아웃용.
        CDelayTimer m_tmTemp    ; //싸이클 함수에서 막대려다 쓰는애.

        SStat Stat ;              //
        SStep Step , PreStep ;

        bool   FindChip   (int &r , int &c );
	double GetMotrPos (EN_MOTR_ID _iMotr , EN_PSTN_ID _iPstnId ); //모터가 가야할 포지션을 리턴함. Double형.
	bool   CheckSafe  (EN_MOTR_ID _iMotr , EN_PSTN_ID _iPstnId ); //모터가 움직일때 충돌조건 감지.
        bool   CheckSafe  (EN_ACTR_ID _iActr , bool       _bFwd    ); //실린더가 움직일때 충돌조건 감지.

    public:    /* Direct Accessable Var.  */
        bool GetWorkEnd (){return Stat.bWorkEnd ;}
        bool GetReqStop (){return Stat.bReqStop ;}

        int           GetHomeStep    (){return Step.iHome    ;} int GetPreHomeStep   (){return PreStep.iHome    ;}
        int           GetToStartStep (){return Step.iToStart ;} int GetPreToStartStep(){return PreStep.iToStart ;}
        EN_SEQ_CYCLE  GetSeqStep     (){return Step.iSeq     ;} int GetPreSeqStep    (){return PreStep.iSeq     ;}
        int           GetCycleStep   (){return Step.iCycle   ;} int GetPreCycleStep  (){return PreStep.iCycle   ;}
        int           GetToStopStep  (){return Step.iToStop  ;} int GetPreToStopStep (){return PreStep.iToStop  ;}

	//Motor.
	bool MoveMotr (EN_MOTR_ID _iMotr , EN_PSTN_ID _iPstnId); // 모터를 움직일때 쓰는 함수.

	//Actuator.
	bool MoveActr (EN_ACTR_ID _iActr , bool _bFwd); //실린더를 움직일때 쓰는 함수.

        //HomeCycle
        bool CycleHome(); //파트 홈을 잡을때 쓰는 함수.

	//One Cycle.
	bool CycleOut        (void); //Rail끝단에서 장비 밖으로 배출 되는 함수.
        bool CycleFlip       (void); //Rail끝단에서 트림을 위해 플립을 하는 동작.
      //bool CycleReFlip     (void); //Rail끝단으로 플립한다.
        bool CycleInsp3Out   (void); //Insp3Zone에서 PostBuffer로 자제 이송.
        bool CycleInsp2Out   (void); //Insp3Zone에서 PostBuffer로 자제 이송.
        bool CycleInsp1Out   (void); //Insp3Zone에서 PostBuffer로 자제 이송.
        bool CyclePreBuffOut (void); //Insp3Zone에서 PostBuffer로 자제 이송.
        bool CycleIn         (void); //스트립을 PreBuff로 이송.

        //Running Functions.
	bool Update      (void); //오토런닝시에 계속 타는 함수.
	bool ToStopCon   (void); //스탑을 하기 위한 조건을 보는 함수.
	bool ToStartCon  (void); //스타트를 하기 위한 조건을 보는 함수.
	bool CycleToStart(void); //스타트를 하기 위한 함수.
	bool CycleToStop (void); //스탑을 하기 위한 함수.

        //For Start Stop Checking.
        void SetLastCmd (void); //장비 정지시에 마지막 커맨드를 기억 하고 있다가.
        bool CheckMoved (void); //이 함수를 이용해 움직였는지 확인 하고 장비 스타트 시에 그냥 작업 할 껀지 아니면 ToStart를 하고 할 건지 결정.
        bool CheckStop  (void); //장비 정지시에 모든 모터 와 실린더 가 정지 되었는지 확인 하는 함수.

        //Loading Para.
        void Load(bool IsLoad , FILE *fp);

};

//---------------------------------------------------------------------------
extern CRail RL;

//---------------------------------------------------------------------------
#endif
